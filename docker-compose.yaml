---
version: '3.2'

services:
  ci:
    build:
      context: jenkins/master
      dockerfile: Dockerfile
    image: 114151591996.dkr.ecr.eu-west-1.amazonaws.com/abmd/ci-master:latest
    user: root:users
    volumes:
      - type: bind
        source: /etc/timezone
        target: /etc/timezone:ro
      - type: bind
        source: /usr/share/zoneinfo/${TZ:-Europe/London}
        target: /usr/share/zoneinfo/${TZ:-Europe/London}
      - type: bind
        source: /usr/share/zoneinfo/${TZ:-Europe/London}
        target: /etc/localtime
      - "/var/run/docker.sock:/var/run/docker.sock:z"
      - "./ci/jobs:/var/jenkins_home/jobs"
      - "./ci/workspace:/var/jenkins_home/workspace"
    environment:
      - TZ=${TZ:-Europe/London}
      - "JAVA_OPTS=-Djenkins.install.runSetupWizard=false"
    networks:
      - main
    secrets:
      - ci-user
      - ci-password
    deploy:
      mode: replicated
      replicas: 0
      restart_policy:
        condition: any
      placement:
        constraints:
          - node.role == manager
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=abitmoredepth_main"
        - "traefik.http.middlewares.https-redirect-scheme.redirectscheme.scheme=https"
        - "traefik.http.routers.ci-router.entrypoints=http,https"
        - "traefik.http.routers.ci-router.rule=Host(`ci.abitmoredepth.com`)"
        - "traefik.http.routers.ci-router.tls.certResolver=default"
        - "traefik.http.services.ci-service.loadbalancer.server.port=8080"

  ghost:
    image: ghost:latest
    volumes:
      - ./ghost/config.production.json:/var/lib/ghost/config.production.json
      - ghost_content:/var/lib/ghost/content
    environment:
      - "database__client:mariadb"
      - "database__connection__host:mariadb"
      - "database__connection__user:ghostly"
      - "database__connection__password:ahnonotanotheroneofthosereallybastardlongpasswords..?"
      - "database__connection__database:ghost"
    networks:
      - main
    deploy:
      mode: replicated
      replicas: 0
      restart_policy:
        condition: any
      placement:
        constraints:
          - node.role == manager
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=abitmoredepth_main"
        - "traefik.http.middlewares.https-redirect-scheme.redirectscheme.scheme=https"
        - "traefik.http.routers.ghost-router.entrypoints=http,https"
        - "traefik.http.routers.ghost-router.rule=Host(`www.abitmoredepth.com`) || Host(`abitmoredepth.com`)"
        - "traefik.http.routers.ghost-router.tls.certResolver=default"
        - "traefik.http.services.ghost-service.loadbalancer.server.port=2368"

  mariadb:
    image: mariadb:5
    volumes:
      - maria_data:/var/lib/mysql
    environment:
      - "MYSQL_ROOT_PASSWORD=Holyfeckthisisoneofthosereallydamnablylongrootpasswords!!"
      - "MYSQL_DATABASE=ghost"
      - "MYSQL_USER=ghostly"
      - "MYSQL_PASSWORD=ahnonotanotheroneofthosereallybastardlongpasswords..?"
    networks:
      - main
    deploy:
      mode: replicated
      replicas: 0
      restart_policy:
        condition: any
      placement:
        constraints:
          - node.role == manager


  db:
    image: postgres:11-alpine
    environment:
      POSTGRES_DB: "wiki"
      POSTGRES_PASSWORD: "Holyfeckthisisoneofthosereallydamnablylongrootpasswords!!"
      POSTGRES_USER: "wikijs"
    networks:
      - main
    logging:
      driver: "none"
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: any
      placement:
        constraints:
          - node.role == manager
    volumes:
      - db-data:/var/lib/postgresql/data

  wiki:
    image: requarks/wiki:2
    depends_on:
      - db
    environment:
      DB_TYPE: postgres
      DB_HOST: db
      DB_PORT: 5432
      DB_USER: "wikijs"
      DB_PASS: "Holyfeckthisisoneofthosereallydamnablylongrootpasswords!!"
      DB_NAME: wiki
    volumes:
      - "./wiki/config.yaml:/wiki/config.yml"
    secrets:
      - source: wiki-key
        target: wiki-key
        uid: "1000"
        mode: 0400
    networks:
      - main
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: any
      placement:
        constraints:
          - node.role == manager
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=abitmoredepth_main"

          # setup HTTP - HTTP redirect middleware
        - "traefik.http.middlewares.https-redirect.redirectscheme.scheme=https"

          # Setup HTTP entrypoint
        - "traefik.http.routers.wiki-http-router.rule=Host(`www.abitmoredepth.com`, `abitmoredepth.com`)"
        - "traefik.http.routers.wiki-http-router.entrypoints=http"
          # Bind the HTTP to HTTPS redirect scheme to this router
        - "traefik.http.routers.wiki-http-router.middlewares=https-redirect"


          # Setup redirect from www. to abitmoredepth.com
        - "traefik.http.middlewares.wiki-www-redirect.redirectregex.regex=^.*www.abitmoredepth.com/(.*)"
        - "traefik.http.middlewares.wiki-www-redirect.redirectregex.replacement=https://abitmoredepth.com/$${1}"

          # We support www.abitmoredepth.com as well, but we re-direct this to the primary FQDN below.
        - "traefik.http.routers.www-wiki-router.rule=Host(`www.abitmoredepth.com`)"
        - "traefik.http.routers.www-wiki-router.middlewares=wiki-www-redirect"
        - "traefik.http.routers.www-wiki-router.entrypoints=https"
          # Register the www wiki router for LetsEncrypt
        - "traefik.http.routers.www-wiki-router.tls.certResolver=default"

          # The primary host to serve from
        - "traefik.http.routers.wiki-router.rule=Host(`abitmoredepth.com`)"
          # Pickup the site on either HTTP or HTTPS
        - "traefik.http.routers.wiki-router.entrypoints=https"
          # Register the HTTPS wiki router for LetsEncrypt
        - "traefik.http.routers.wiki-router.tls.certResolver=default"

          # Setup TLS domain for LetsEncrypt
        - "traefik.http.routers.wiki-router.tls.domains[0].main=abitmoredepth.com"

          # Define the backend
        - "traefik.http.services.wiki-service.loadbalancer.server.port=3000"

  portainer:
    image: portainer/portainer
    volumes:
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
      - type: volume
        source: portainer-data
        target: /data
    networks:
      - main
      - portainer_agent
    command: -H tcp://tasks.agent:9001 --tlsskipverify
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: any
      placement:
        constraints:
          - node.role == manager
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=abitmoredepth_main"
        - "traefik.http.middlewares.https-redirect-scheme.redirectscheme.scheme=https"
        - "traefik.http.routers.portainer-router.entrypoints=http,https"
        - "traefik.http.routers.portainer-router.rule=Host(`manage.abitmoredepth.com`)"
        - "traefik.http.routers.portainer-router.tls.certResolver=default"
        - "traefik.http.services.portainer-service.loadbalancer.server.port=9000"

  agent:
    image: portainer/agent
    environment:
      AGENT_CLUSTER_ADDR: tasks.agent
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    ports:
      - target: 9001
        published: 9001
        protocol: tcp
        mode: host
    networks:
      - portainer_agent
    deploy:
      mode: global
      placement:
        constraints:
          - node.platform.os == linux

  traefik:
    image: traefik:latest
    ports:
      - "443:443"
      - "8080:8080"
      - "80:80"
    volumes:
      # Docker socket
      - /var/run/docker.sock:/var/run/docker.sock

      # Traefik base config.
      - ./traefik/traefik.yaml:/traefik.yaml

      # ACME data
      - traefik_certs:/etc/traefik/acme/
      # - ./traefik/certs:/etc/traefik/acme/
      # - ./traefik/auth:/etc/traefik/auth
    networks:
      - main
    secrets:
     - traefik-auth
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: any
      placement:
        constraints:
          - node.role == manager
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=abitmoredepth_main"

        - "traefik.http.middlewares.traefik-auth.digestauth.usersfile=/run/secrets/traefik-auth"
        - "traefik.http.middlewares.https-redirect-scheme.redirectscheme.scheme=https"

        - "traefik.http.routers.traefik-router.entrypoints=http,https"
        - "traefik.http.routers.traefik-router.middlewares=traefik-auth,https-redirect-scheme"

        - "traefik.http.routers.traefik-router.rule=Host(`traefik.abitmoredepth.com`)"
        - "traefik.http.routers.traefik-router.service=api@internal"
        - "traefik.http.routers.traefik-router.tls.certResolver=default"

        # Dummy service for Swarm port detection. The port can be any valid integer value.
        - "traefik.http.services.traefik-service.loadbalancer.server.port=9999"

volumes:
  db-data:

  ghost_content:

  ghost_source:

  maria_data:

  portainer-data:

  reg-data:

  traefik_certs:

networks:
  portainer_agent:
    driver: overlay
    attachable: true

  main:
    driver: overlay
    attachable: true

secrets:
  ci-user:
    file: ./jenkins/master/secret-user
  ci-password:
    file: ./jenkins/master/secret-password
  traefik-auth:
    file: ./traefik/secret-traefik-auth
  wiki-key:
    file: ./wiki/secret-wiki-ssh-key
